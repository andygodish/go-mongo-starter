package mocks

import (
	"context"

	"github.com/andygodish/go-mongo-starter/utils/mongodb"
	"github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// DatabaseHelper is an autogenerated mock type for the DatabaseHelper type
type DatabaseHelper struct {
	mock.Mock
}

// Client provides a mock function with given fields:
func (_m *DatabaseHelper) Client() mongodb.ClientHelper {
	ret := _m.Called()

	var r0 mongodb.ClientHelper
	if rf, ok := ret.Get(0).(func() mongodb.ClientHelper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongodb.ClientHelper)
		}
	}

	return r0
}

// Collection provides a mock function with given fields: name
// func (_m *DatabaseHelper) Collection(name string) mongodb.CollectionHelper {
// 	ret := _m.Called(name)

// 	var r0 mongodb.CollectionHelper
// 	if rf, ok := ret.Get(0).(func(string) mongodb.CollectionHelper); ok {
// 		r0 = rf(name)
// 	} else {
// 		if ret.Get(0) != nil {
// 			r0 = ret.Get(0).(mongodb.CollectionHelper)
// 		}
// 	}

// 	return r0
// }

// CreateCollection provides a mock function with given fields: ctx, name, opts
func (_m *DatabaseHelper) CreateCollection(ctx context.Context, name string, opts ...*options.CreateCollectionOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*options.CreateCollectionOptions) error); ok {
		r0 = rf(ctx, name, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
